{"version":3,"sources":["material-input/index.js","App.js","serviceWorker.js","index.js"],"names":["MaterialInput","useState","value","setValue","focus","setFocus","className","id","onChange","event","console","log","target","onFocus","onBlur","App","toggle","index","state","openState","setState","isOpen","getStatusClass","currentState","set","this","setInterval","clearInterval","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TAGe,SAASA,IAAiB,IAAD,EACZC,mBAAS,IADG,mBAC/BC,EAD+B,KACxBC,EADwB,OAEZF,oBAAS,GAFG,mBAE/BG,EAF+B,KAExBC,EAFwB,KAmBtC,OACE,yBAAKC,UAAS,uBAAkBF,EAAQ,aAAe,KACrD,yCACEG,GAAG,iCACC,CACFL,QAAOM,SAVE,SAACC,GAChBC,QAAQC,IAAIF,EAAMG,OAAOV,OACzBC,EAASM,EAAMG,OAAOV,QAQCW,QApBT,WACdH,QAAQC,IAAI,GACZN,GAAS,IAkBuBS,OAfnB,WACbJ,QAAQC,IAAI,GACZN,GAAS,OAgBP,yBAAKC,UAAS,mBAAeJ,GAASE,EAAS,UAAY,KAA3D,gB,IC1BeW,E,kDACnB,aAAe,IAAD,8BACZ,gBAqBFC,OAAS,SAACC,GACJ,EAAKC,MAAMC,YAAcF,EAAO,EAAKG,SAAS,CAAEC,QAAS,EAAKH,MAAMG,SACnE,EAAKD,SAAS,CAAED,UAAWF,EAAOI,QAAQ,KAxBnC,EA2BdC,eAAiB,SAACL,GAAW,IACnBM,EAAiB,EAAKL,MAAtBK,aACR,QAAQ,GACN,KAAKA,IAAiBN,EAAO,MAAO,SACpC,KAAKA,EAAQM,EAAc,MAAO,YAClC,KAAKN,EAAQM,EACb,QAAS,MAAO,YA9BlB,EAAKC,IAAM,KACX,EAAKN,MAAQ,CACXG,QAAQ,EACRE,aAAc,GANJ,E,gEAUO,IAAD,OAClBE,KAAKD,IAAME,aAAY,WACrB,EAAKN,SAAS,CACZG,aAAc,EAAKL,MAAMK,aAAe,MAEzC,O,6CAIHI,cAAcF,KAAKD,O,+BAmBX,IAAD,OACP,OACE,yBAAKlB,UAAU,aACb,kEACA,wBAAIA,UAAU,WACZ,wBAAIA,UAAS,eAAUmB,KAAKH,eAAe,GAA9B,WACX,yBAAKhB,UAAU,SAASsB,QAAS,kBAAM,EAAKZ,OAAO,KAAnD,UAE2B,IAAzBS,KAAKP,MAAMC,WAAmBM,KAAKP,MAAMG,QAAU,yBAAKf,UAAU,WAAf,YAGvD,wBAAIA,UAAS,eAAUmB,KAAKH,eAAe,KACzC,yBAAKhB,UAAU,SAASsB,QAAS,kBAAM,EAAKZ,OAAO,KAAnD,UAE2B,IAAzBS,KAAKP,MAAMC,WAAmBM,KAAKP,MAAMG,QAAU,yBAAKf,UAAU,WAAf,YAGvD,wBAAIA,UAAS,eAAUmB,KAAKH,eAAe,GAA9B,UACX,yBAAKhB,UAAU,SAASsB,QAAS,kBAAM,EAAKZ,OAAO,KAAnD,UAE2B,IAAzBS,KAAKP,MAAMC,WAAmBM,KAAKP,MAAMG,QAAU,yBAAKf,UAAU,WAAf,aAQzD,kBAACN,EAAD,W,GAnEyB6B,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.fc222732.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport \"./index.css\";\n\nexport default function MaterialInput() {\n  const [value, setValue] = useState(\"\");\n  const [focus, setFocus] = useState(false);\n\n  const onFocus = () => {\n    console.log(1)\n    setFocus(true)\n  }\n\n  const onBlur = () => {\n    console.log(2)\n    setFocus(false)\n  }\n\n  const onChange = (event) => {\n    console.log(event.target.value)\n    setValue(event.target.value)\n  }\n\n  return (\n    <div className={`m__container ${focus ? \"m__focused\" : \"\"}`}>\n      <input\n        id=\"material-input-(random-value)\"\n        {...{\n          value, onChange, onFocus, onBlur\n        }}\n      />\n      <div className={`m__title ${(value || focus) ? \"m__move\" : \"\"}`}>Input Title</div>\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport \"./App.css\";\nimport MaterialInput from './material-input';\n\nexport default class App extends Component {\n  constructor() {\n    super()\n\n    this.set = null;\n    this.state = {\n      isOpen: false,\n      currentState: 0\n    }\n  }\n\n  componentDidMount() {\n    this.set = setInterval(() => {\n      this.setState({\n        currentState: this.state.currentState + 1\n      })\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.set);\n  }\n\n  toggle = (index) => {\n    if (this.state.openState === index) this.setState({ isOpen: !this.state.isOpen })\n    else this.setState({ openState: index, isOpen: true })\n  }\n\n  getStatusClass = (index) => {\n    const { currentState } = this.state;\n    switch (true) {\n      case currentState === index: return \"active\";\n      case index < currentState: return \"completed\";\n      case index > currentState: return \"pending\";\n      default: return \"pending\"\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>State will change every 10 seconds</h1>\n        <ul className=\"stepper\">\n          <li className={`step ${this.getStatusClass(0)} first`}>\n            <div className=\"header\" onClick={() => this.toggle(0)}>HEADER</div>\n            {\n              this.state.openState === 0 && this.state.isOpen && <div className=\"content\">CONTENT</div>\n            }\n          </li>\n          <li className={`step ${this.getStatusClass(1)}`}>\n            <div className=\"header\" onClick={() => this.toggle(1)}>HEADER</div>\n            {\n              this.state.openState === 1 && this.state.isOpen && <div className=\"content\">CONTENT</div>\n            }\n          </li>\n          <li className={`step ${this.getStatusClass(2)} last`}>\n            <div className=\"header\" onClick={() => this.toggle(2)}>HEADER</div>\n            {\n              this.state.openState === 2 && this.state.isOpen && <div className=\"content\">CONTENT</div>\n            }\n          </li>\n        </ul>\n\n\n\n\n        <MaterialInput />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}